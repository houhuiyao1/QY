/**
 * @file 点赞组件
 * @author liji(liji03@baidu.com)
 */
/* globals Page, swan */
const TEXT = {
    ZAN: '赞',
    SUCCESS: '已点赞',
    CANCEL: '已取消'
};
let systemInfo = swan.getSystemInfoSync();
let isLogin = swan.isLoginSync().isLogin;
/* eslint-disable */
Component({
/* eslint-enable */
    externalClasses: ['class-name'],
    properties: {
        // 关注按钮模式
        // 1.icon: 仅有图标; 2.mixture: 图标文字结合
        mode: {
            type: String,
            value: 'icon'
        },
        // 图标类型,提供两种
        // 1:hand(默认); 2:heart
        iconType: {
            type: String,
            value: 'hand'
        },
        // 仅在mode为mixture时可配置, none:无边框; border:有边框
        style: {
            type: String,
            value: 'none'
        },
        // 点赞按钮上的文案，默认为赞，仅在mode为mixture时设置有效
        likeText: {
            type: String,
            value: TEXT.ZAN
        },
        // 点赞数，仅在mode为mixture时设置有效
        likeNum: {
            type: Number,
            value: 0
        },
        // 点赞的状态
        isLiked: {
            type: Boolean,
            value: false
        },
        // 点赞的对象类型
        // 0:代表动态; 1:代表评论
        likeType: {
            type: Number,
            value: 0
        },
        likeParam: {
            type: Object,
            value: {
                // 小程序开发者唯一标识
                openid: '',
                snid: '',
                // 不为空，表示对评论进行点赞。若小程序侧没有 srid 对应的标识，则认为此时对主题进行点赞。
                srid: '',
                appkey: ''
            }
        },
        // 点赞动效形式
        // 0.无动效
        // 1.轻动效
        // 2.强动效
        animationType: {
            type: Number,
            value: 1
        },
        // 点赞后的结果反馈
        isShowToast: {
            type: Boolean,
            value: true
        },
        // toast文案，默认为已点赞、已取消
        toastText: {
            type: Array,
            value: [TEXT.SUCCESS, TEXT.CANCEL]
        }
    },
    data: {
        isLogin
    },
    attached() {
        swan.getSwanId({
            success: res => {
                this.setData({
                    swanid: res.data.swanid
                });
            }
        });
    },
    methods: {
        onTap: function (e) {
            let {
                likeType,
                likeParam,
                isShowToast,
                toastText,
                isLiked,
                likeNum,
                isLogin,
                swanid
            } = this.data;
            if (!isLogin) {
                this.triggerEvent('error', {
                    msg: 'NOT_LOGGED_IN',
                    isLogin
                });
                return;
            }
            const ugcUrl = this.getUrl('ugc');
            const commentUrl = this.getUrl('comment');
            let url = likeType
                    ? commentUrl
                    : ugcUrl;
            let type = !isLiked;
            let tostTitle = !isLiked ? toastText[0] : toastText[1];
            likeParam.type = type;
            likeParam.swanid = swanid;
            // 点赞动效gif展现
            type && this.setData({isAnimate: true}, () => {
                setTimeout(() => {
                    this.setData('isAnimate', false);
                }, 500);
            });
            swan.request({
                url,
                header: {
                    'content-type': 'application/json'
                },
                method: 'POST',
                data: likeParam,
                success: res => {
                    if (res.data.errno === 0) {
                        let number = type ? +likeNum + 1 : +likeNum - 1;
                        this.setData({
                            isLiked: type,
                            likeNum: number
                        });

                        if (isShowToast) {
                            swan.showToast({
                                icon: 'none',
                                title: tostTitle
                            });
                        }
                        this.triggerEvent('success', {type});
                    }
                    else {
                        this.triggerEvent('fail', res);
                    }
                },
                fail: err => {
                    this.triggerEvent('fail', err);
                }
            });
        },
        getUrl(type) {
            let host = systemInfo.host;
            let likeParam = this.data.likeParam;
            const link = 'https://ossapi.baidu.com/oss/publisher/';
            const requestUrl = link + type + '/like?host_name=' + host
                + '&app_key=' + likeParam.appkey;
            return requestUrl;
        }
    }
});
