/**
 * @file publish.js
 * @author houyu(houyu01@baidu.com)
 */
const api = require('./api');
let systemInfo = swan.getSystemInfoSync();
let isLogin = swan.isLoginSync().isLogin;
// 工具方法，之后提取出来
const aopAfter = decorators => component => {
    for (let func in decorators) {
        const context = component[func] ? component : component.methods;
        const originMethod = context[func];
        if (originMethod) {
            context[func] = function (args) {
                const returnValue = originMethod.call(this, args);
                decorators[func]({
                    args,
                    thisObject: this,
                    returnValue
                });
            };
        }
    }
    return component;
};

// 具体要拦截的方法们
const contentDecorator = aopAfter({

    onTitleChange: ({thisObject}) => {
        thisObject.resolvePublichStatus();
    },

    onContentChange: ({thisObject}) => {
        thisObject.resolvePublichStatus();
    },

    delPicture: ({thisObject}) => {
        thisObject.resolvePublichStatus();
    },

    ready: function ({thisObject}) {
        thisObject.resolvePublichStatus();
    }

});

/* globals Page, swan */

const Publish = contentDecorator({


    properties: {
        // 以下为原生和组件共用属性
        showPublish: {
            type: Boolean,
            value: false,
            observer: function (newVal, oldVal) {
                newVal && this.openPublish();
            }
        },
        contentPlaceholder: {
            type: String,
            value: '请输入正文'
        },
        titlePlaceholder: {
            type: String,
            value: '请输入标题'
        },
        navigationBarTitle: {
            type: String,
            value: '发布'
        },

        // 以下为原生发布器属性
        moduleList: {
            type: Array,
            value: ['title', 'image']
        },
        imageConf: {
            type: Object,
            values: {
                maxNum: 9,
                ratio: 1
            }
        },
        navBarTextStyle: {
            type: String,
            value: 'black'
        },
        navBarBackgroundColor: {
            type: String,
            value: '#ffffff'
        },
        confirmText: {
            type: String,
            value: '发布'
        },
        confirmColor: {
            type: String,
            value: '#3388ff'
        },
        cancelText: {
            type: String,
            value: '取消'
        },
        cancelColor: {
            type: String,
            value: '#666666'
        },
        // 设置发布范围文案，若配置发布范围模块，则必填
        targetText: {
            type: String,
            value: ''
        },
        emojiPath: {
            type: String,
            value: ''
        },

        // 以下为组件的属性
        theme: {
            type: String,
            value: ''
        },

        title: {
            type: String,
            value: ''
        },

        content: {
            type: String,
            value: ''
        },

        pictureList: {
            type: Array,
            value: []
        },

        pictureLimit: {
            type: Number,
            value: 9
        },

        titleLimit: {
            type: Number,
            value: 20
        },

        titleMinLimit: {
            type: Number,
            value: -1
        },

        contentLimit: {
            type: Number,
            value: 120
        },

        contentMinLimit: {
            type: Number,
            value: -1
        },

        showPictureTips: {
            type: Boolean,
            value: false
        },

        pictureSizeLimit: {
            type: Number,
            value: 1e7
        },

        tipsEdge: {
            type: Number,
            value: 20
        },

        pictureSelectLimit: {
            type: Number,
            value: 9
        },

        contentAutoHeight: {
            type: Boolean,
            value: true
        },

        contentHeight: {
            type: String,
            value: 'auto'
        },
        // 动态发布成功后的返回
        submitParam: {
            type: Object,
            value: {
                // 动态在开发者侧的唯一标识。
                // 当为空，默认开发者将数据托管在宿主，小程序侧创建动态后返回唯一标识给开发者。
                snid: '',
                // 动态的 schema 格式，跳转用
                path: '',
                // 小程序唯一标识
                appkey: '',
                // 小程序开发者唯一标识
                openid: ''
            },
            observer(value) {
                for (let item in value) {
                    if (!value[item]) {
                        return;
                    }
                }
                this.ugcCreate(value);
            }
        }
    },

    data: {
        disableStatus: 'disable',
        focusingClass: '',
        contentClass: '',
        title: '',
        content: '',
        pictureList: [],
        isLogin,
        /* eslint-disable fecs-camelcase */
        _show: !swan.openCommunityEditor
        /* eslint-enable fecs-camelcase */
    },

    contentInfos: {
        title: '',
        content: ''
    },

    lifetimes: {
        created() {
            swan.setNavigationBarTitle({
                title: this.data.navigationBarTitle
            });

            !swan.getStorageSync('publishNum')
            && swan.setStorageSync('publishNum', 1);
        }
    },

    methods: {
        openPublish() {
            if (swan.openCommunityEditor) {
                const {
                    contentPlaceholder,
                    titlePlaceholder,
                    imageConf,
                    moduleList,
                    navBarTextStyle,
                    navBarBackgroundColor,
                    confirmText,
                    confirmColor,
                    cancelText,
                    cancelColor,
                    targetText,
                    emojiPath
                } = this.data;
                swan.openCommunityEditor({
                    contentPlaceholder,
                    titlePlaceholder,
                    imageConf,
                    moduleList,
                    navBarTextStyle,
                    navBarBackgroundColor,
                    confirmText,
                    confirmColor,
                    cancelText,
                    cancelColor,
                    targetText,
                    emojiPath,
                    navBarTitleText: this.data.navigationBarTitle,
                    success: res => {
                        let images = res.tempFiles ? res.tempFiles.map(file => file.path) : [];
                        if (images.length) {
                            this.triggerEvent('chooseimage', {
                                images
                            });
                        }
                        this.triggerEvent('publish', {
                            title: res.title,
                            content: res.content,
                            images
                        });
                        swan.closeCommunityEditor();
                        this.setData('showPublish', false);
                    },
                    fail: err => {
                        this.triggerEvent('fail', {err});
                        this.setData('showPublish', false);
                    },
                    complete: res => {
                        this.triggerEvent('complete', {res});
                    }
                });

                swan.navigateBack();
            }
        },
        /**
         * 百度内部请求
         * @param {Object} [param] - 外部开发者返回的参数
         */
        ugcCreate(param) {
            let host = systemInfo.host;
            let {title, content, pictureList} = this.data;

            let innerData = {
                title,
                content,
                images: pictureList
            };
            let data = Object.assign(param, innerData);
            const link = 'https://ossapi.baidu.com/oss/publisher/ugc';
            let url = link + '?host_name=' + host + '&app_key=' + param.appkey;
            swan.request({
                url,
                header: {
                    'content-type': 'application/json'
                },
                method: 'POST',
                data,
                success: res => {
                    let successNum = swan.getStorageSync('publishNum');
                    if (res.data.errno === 0) {
                        if (successNum === 1) {
                            this.setData('showModal', true);
                        }
                        else {
                            swan.showToast({
                                icon: 'none',
                                title: '发布成功'
                            });
                        }
                        successNum++;
                        swan.setStorageSync('publishNum', successNum);
                    }
                    else {
                        swan.showToast({
                            icon: 'none',
                            title: res.data.msg || '发布失败'
                        });
                    }
                },
                fail: err => {
                    swan.showModal({
                        title: '标题',
                        content: err.errMsg,
                        showCancel: false
                    });
                }
            });
        },
        /**
         * 增加图片方法，并派发事件通知外部
         * @param {Object} [e] - 事件对象
         */
        addPicture: function (e) {
            let pictureList = this.data.pictureList || [];
            api
                .chooseImage({
                    count: this.data.pictureSelectLimit - pictureList.length
                })
                .then(event => {
                    const selectedImages = event.tempFiles;
                    const totalImagesLength = selectedImages.length + this.data.pictureList.length;
                    if (totalImagesLength > this.data.pictureLimit) {
                        swan.showToast({
                            title: `图片总数超过${this.data.pictureLimit}张，无法上传`,
                            icon: 'none'
                        });
                        return;
                    }
                    // 有图片大于10M的话，则超标
                    if (this.data.pictureSizeLimit > 0
                        && selectedImages.some(file => file.size > this.data.pictureSizeLimit)
                    ) {
                        swan.showToast({
                            title: `部分图片大于${this.data.pictureSizeLimit / 1000000}M，无法上传`,
                            icon: 'none'
                        });
                        return Promise.reject();
                    }
                    this.triggerEvent('chooseimage', {
                        images: selectedImages.map(file => file.path)
                    });
                });
        },

        /**
         * 查看图片
         * @param {Object} [e] - 事件对象
         */
        viewPicture: function (e) {
            swan.previewImage({
                current: this.data.pictureList[e.currentTarget.dataset.index],
                urls: this.data.pictureList
            });
        },

        delPicture: function (e) {
            let pictureList = this.data.pictureList;
            let index = e.currentTarget.dataset.index;
            pictureList.splice(index, 1);
            this.triggerEvent('delimage', {index});
            this.setData({pictureList});
        },

        onSubmit: function (e) {
            if (!isLogin) {
                this.triggerEvent('error', {
                    msg: 'NOT_LOGGED_IN',
                    isLogin
                });
                return;
            }
            const values = e.detail.value;
            if (this.data.disableStatus === 'disable') {
                return;
            }
            this.triggerEvent('publish', {
                title: values.title,
                content: values.content,
                images: this.data.pictureList
            });
        },

        onTitleChange: function (e) {

            this.data.title = e.detail.value;
            let titleLen = this.data.title.length;

            if (titleLen >= this.data.titleLimit) {
                swan.showToast({
                    title: `标题最多${this.data.titleLimit}字`,
                    icon: 'none'
                });
            }

            this.setData({
                contentClass: titleLen > 0 ? 'has-content' : ''
            });
        },

        onContentChange: function (e) {
            this.data.content = e.detail.value;
        },

        /**
         * 处理"发布"按钮的展现策略
         *
         * @return {bool} - 是否禁用发布按钮
         */
        resolvePublichStatus: function () {
            let title = this.data.title || '';
            let content = this.data.content || '';
            let pictureList = this.data.pictureList || '';

            let hasTitle = !!title.length && !/^(\s|\r|\n)*$/.test(title);
            let hasContent = !!content.length && !/^(\s|\r|\n)*$/.test(content);
            let hasImage = !!pictureList.length;

            let contentOverMinLimit = content.length < this.data.contentMinLimit
                || content.length > this.data.contentLimit;
            let titleOverMinLimit = title.length < this.data.titleMinLimit
                || title.length > this.data.titleLimit;

            let isDisable = !((hasTitle && !titleOverMinLimit)
                              && ((hasContent && !contentOverMinLimit)
                                  || (hasImage && !~this.data.contentMinLimit)));

            this.setData({
                disableStatus: isDisable ? 'disable' : ''
            });

            return isDisable;
        },

        clearTitle: function () {
            this.setData({title: ''});
        },

        titleFocus: function () {
            this.setData({focusingClass: 'focus'});
        },

        titleBlur: function () {
            this.setData({focusingClass: ''});
        },

        closeModal: function () {
            this.setData('showModal', false);
        }
    }
});


Component(Publish); // eslint-disable-line
