/**
 * @file 评论发布器
 * @author xuechao(xuechao02@baidu.com)
 */
/* globals Component, swan */
let systemInfo = swan.getSystemInfoSync();
let isLogin = swan.isLoginSync().isLogin;
Component({ // eslint-disable-line

    properties: {
        showPublish: {
            type: Boolean,
            value: false,
            observer: function (newVal, oldVal) {
                newVal && this.openPublish();
            }
        },
        sendBackgroundColor: {
            type: String,
            value: '#38f'
        },
        sendTextColor: {
            type: String,
            value: '#fff'
        },
        sendText: {
            type: String,
            value: '发送'
        },
        contentPlaceholder: {
            type: String,
            value: '请输入评论内容',
            observer(data) {
                this.setData('placeholder', data);
            }
        },
        moduleList: {
            type: Array,
            value: [],
            observer(data) {
                this.setData({
                    cursorSpacing: data.includes('image') ? 56 : 30,
                    isUpLoadImg: data.includes('image')
                });
            }
        },
        emojiPath: {
            type: String,
            value: ''
        },

        // 降级方案专用属性
        focus: {
            type: Boolean,
            value: false,
            observer(data) {
                this.setData({
                    inputFocus: data
                });
            }
        },
        isUpLoadImage: {
            type: Boolean,
            value: false
        },
        requestUrl: {
            type: String,
            value: ''
        },
        params: {
            type: Object,
            value: {}
        },
        // 以下为增加内部审核需要的字段
        // 评论发布成功后的返回
        commentParam: {
            type: Object,
            value: {
                // 动态在开发者侧的唯一标识。
                // 当为空，默认开发者将数据托管在宿主，小程序侧创建动态后返回唯一标识给开发者。
                snid: '',
                // 回复 id
                srid: '',
                // 动态的 schema 格式，跳转用
                path: '',
                // 小程序唯一标识
                appkey: '',
                // 评论的标题
                title: '',
                openid: '',
                // 评论的动态内容
                content: ''
            },
            observer(value) {
                let valueArr = Object.keys(value);
                if (valueArr.length === 0) {
                    return;
                }
                for (let item in value) {
                    if (!value[item]) {
                        return;
                    }
                }
                this.commentCreate(value);
            }
        }
    },
    data: {
        placeholder: '请输入评论内容',
        editMode: false,
        uploadImgUrl: [],
        inputFocus: false,
        inputHeight: 58,
        lineCount: 1,
        inputValue: '',
        preInputValue: '',
        cursorSpacing: 30,
        isPhoneX: false,
        bottomDistance: 0,
        height: 0,
        platform: 'ios',
        isUpLoadImg: false,
        canIUse: !swan.openReplyEditor,
        isLogin
    },
    attached(format, data) {
        swan.getSystemInfo({
            success: data => {
                const isPhoneX = data.model.indexOf('iPhone X') !== -1;
                this.setData({
                    isPhoneX: isPhoneX,
                    platform: data.platform,
                    bottomDistance: isPhoneX ? 64 : 0,
                    cursorSpacing: this.data.isUpLoadImg ? 56 : (data.platform === 'ios' ? 10 : 40)
                }, data);
            }
        });
        swan.getSwanId({
            success: res => {
                this.setData({
                    swanid: res.data.swanid
                });
            }
        });
        !swan.getStorageSync('commentNum')
        && swan.setStorageSync('commentNum', 1);
    },
    detached() {
        this.setData({
            inputFocus: false
        });
    },
    methods: {
        openPublish() {
            this.openReplyEditor();
        },
        openReplyEditor() {
            if (swan.openReplyEditor) {
                const {
                    sendBackgroundColor,
                    sendTextColor,
                    sendText,
                    contentPlaceholder,
                    moduleList,
                    emojiPath
                } = this.data;
                swan.openReplyEditor({
                    sendBackgroundColor,
                    sendTextColor,
                    sendText,
                    contentPlaceholder,
                    moduleList,
                    emojiPath,
                    success: res => {
                        if (res.status === 'reply' || res.status === 'replay') {
                            let inputValue = res.content;
                            let uploadImgUrl = res.tempFiles;
                            this.triggerEvent('relasecomment', {
                                inputValue,
                                uploadImgUrl
                            });
                            this.setData({
                                inputValue,
                                uploadImgUrl
                            });
                            swan.closeReplyEditor();
                        }
                        // 点击发布器外隐藏发布器，编辑的内容将存为草稿
                        else if (res.status === 'draft') {
                            this.triggerEvent('close', res);
                        }
                        this.setData('showPublish', false);
                    },
                    fail: err => {
                        this.triggerEvent('relasecomment', err);
                        this.setData('showPublish', false);
                    }
                });
            }
        },
        // 开发者点击发表按钮后按照要求返回commentParam后执行的
        commentCreate(param) {
            let host = systemInfo.host;
            let {inputValue, uploadImgUrl, swanid} = this.data;
            let innerData = {
                swanid,
                /* eslint-disable fecs-camelcase */
                comment_images: uploadImgUrl,
                /* eslint-enable fecs-camelcase */
                comment: inputValue
            };
            let data = Object.assign(param, innerData);
            const link = 'https://ossapi.baidu.com/oss/publisher/comment';
            let url = link + '?host_name=' + host + '&app_key=' + param.appkey;
            swan.request({
                url,
                header: {
                    'content-type': 'application/json'
                },
                method: 'POST',
                data,
                success: res => {
                    let successNum = swan.getStorageSync('commentNum');
                    if (res.data.errno === 0) {
                        if (successNum === 1) {
                            this.setData('showModal', true);
                        }
                        else {
                            swan.showToast({
                                icon: 'none',
                                title: '发布成功'
                            });
                        }
                        successNum++;
                        swan.setStorageSync('commentNum', successNum);
                    }
                    else {
                        this.triggerEvent('fail', res);
                    }
                },
                fail: err => {
                    this.triggerEvent('fail', err);
                }
            });
        },
        obj2paramsStr(obj) {
            let paramsStr = '';
            for (let key in obj) {
                paramsStr += `&${key}=${obj[key]}`;
            }
            return '?' + paramsStr.substr(1);
        },
        editMode(event) {
            this.setData({
                editMode: true,
                inputFocus: true,
                inputValue: this.data.preInputValue
                // bottomDistance: 0
            });
            this.setCursorSpacing(this.data.lineCount, this.data.uploadImgUrl.length > 0);
        },
        browseMode(target) {
            if (!this.data.editMode) {
                return;
            }
            let {inputValue, uploadImgUrl} = this.data;
            this.triggerEvent('browsemode', {
                inputValue,
                uploadImgUrl: uploadImgUrl[0]
            });
            const imgText = this.data.uploadImgUrl.length > 0 ? '[图片]' : '';
            const inputResult = imgText + inputValue;
            this.getTextareaHeight();
            this.setData({
                editMode: false,
                inputFocus: false,
                preInputValue: target.detail.value,
                inputValue: inputResult.length > 10 ? inputResult.slice(0, 10) + '...' : inputResult,
                bottomDistance: this.data.isPhoneX ? 44 : 0,
                showPublish: false
            });
        },
        getTextareaHeight() {
            const query = swan.createSelectorQuery().in(this);
            query.select('.input-box').boundingClientRect();
            query.exec(info => {
                this.setData({
                    height: info[0].height
                });
            });
        },
        uploadImg() {
            new Promise(resolve => {
                swan.chooseImage({
                    count: 1,
                    sourceType: ['album'],
                    success: res => {
                        const tempFilePaths = res.tempFilePaths;
                        this.setData({
                            uploadImgUrl: tempFilePaths,
                            inputValue: this.data.preInputValue,
                            inputFocus: true,
                            editMode: true
                        });
                        this.setCursorSpacing(this.data.lineCount, true);
                        resolve('');
                    },
                    fail() {
                        swan.showToast({
                            icon: 'none',
                            title: 'fail'
                        });
                    }
                });
            }).then(() => {
                let paramsStr = this.obj2paramsStr(this.properties.params);
                let url = this.properties.requestUrl + paramsStr;
                swan.uploadFile({
                    url,
                    filePath: this.data.uploadImgUrl[0],
                    name: 'file',
                    success: res => {
                        try {
                            this.setData({
                                uploadImgUrl: res.data.data.attachment
                            });
                        }
                        catch (error) {
                            swan.showToast({
                                icon: 'none',
                                title: JSON.stringify(error)
                            });
                        }
                    },
                    fail(err) {
                        swan.showToast({
                            icon: 'none',
                            title: 'upload-fail'
                        });
                    }
                });
            });
        },
        releaseComment() {
            let {inputValue, uploadImgUrl} = this.data;
            if (!isLogin) {
                this.triggerEvent('error', {
                    msg: 'NOT_LOGGED_IN',
                    isLogin,
                    inputValue,
                    uploadImgUrl: uploadImgUrl[0]
                });
                return;
            }
            if (!this.data.editMode) {
                return;
            }
            this.triggerEvent('relasecomment', {
                inputValue,
                uploadImgUrl: uploadImgUrl[0]
            });
            this.setData('showPublish', false);
        },
        lineChangeEvent(lines) {
            let lineCount = lines.detail.lineCount;
            if (!this.data.editMode) {
                return;
            }
            this.setData({
                lineCount
            });
            this.setCursorSpacing(lineCount, this.data.uploadImgUrl.length === 1);
        },
        setCursorSpacing(lineCount, hasImg) {
            let space = 30;
            if (!this.data.editMode || !hasImg) {
                return;
            }
            if (lineCount === 1) {
                space = 110;
            }
            else if (lineCount === 2) {
                space = 90;
            }
            else if (lineCount > 2) {
                space = 70;
            }
            this.setData({
                cursorSpacing: space
            });
        },
        deleteImg() {
            this.setData({
                uploadImgUrl: []
            }, () => {
                this.setData({
                    inputFocus: true,
                    editMode: true,
                    inputValue: this.data.preInputValue
                });
            });
        },
        previewImage(param) {
            swan.previewImage({
                current: param.target.dataset.url,
                urls: [param.target.dataset.url],
                success: () => {
                    this.triggerEvent('previewimage');
                }
            });
        },
        closeModal() {
            this.setData('showModal', false);
        }
    }
});
